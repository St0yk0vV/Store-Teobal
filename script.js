// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Ä–µ–¥ –∑–∞–¥–∞–¥–µ–Ω–∏—Ç–µ
const CATEGORIES = ["–•–∞–º–æ–Ω–∏","–ö–∞—à–∫–∞–≤–∞–ª–∏","–¢—É—Ä–æ–Ω–∏","–í–∏–Ω–æ","–î—Ä—É–≥–∏ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏","–î—Ä—É–≥–∏ –Ω–µ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏"];
const LS_KEY = "inventory_v1";

// DOM
const searchEl = document.getElementById("search");
const filterCategoryEl = document.getElementById("filterCategory");
const nameEl = document.getElementById("name");
const categoryEl = document.getElementById("category");
const unitEl = document.getElementById("unit");
const priceEl = document.getElementById("price");
const qtyEl = document.getElementById("qty");
const minEl = document.getElementById("min");
const addBtn = document.getElementById("addBtn");
const tbody = document.getElementById("tbody");
const totalsEl = document.getElementById("totals");
const exportBtn = document.getElementById("exportExcel");
const clearAllBtn = document.getElementById("clearAll");

// –°—ä—Å—Ç–æ—è–Ω–∏–µ
let items = load() || [];

// –ü–æ–ª–µ–∑–Ω–∏
function n(v){ return Number(v || 0); }
function money(v){ return n(v).toFixed(2) + " –ª–≤"; }
function save(){ localStorage.setItem(LS_KEY, JSON.stringify(items)); }
function load(){ try { return JSON.parse(localStorage.getItem(LS_KEY)||"[]"); } catch { return []; } }

// –†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü–∞
function render(){
  const term = (searchEl.value || "").toLowerCase().trim();
  const cat = filterCategoryEl.value || "";

  const filtered = items.filter(it => {
    const matchesText = !term || it.name.toLowerCase().includes(term);
    const matchesCat = !cat || it.category === cat;
    return matchesText && matchesCat;
  });

  tbody.innerHTML = "";
  let totalValue = 0;

  filtered.forEach((it, i) => {
    const remain = n(it.qty) - n(it.sold);
    const value = remain * n(it.price);
    totalValue += value;

    const tr = document.createElement("tr");

    const tdIdx = td(i+1);
    const tdName = td(it.name);
    const tdCat = td(it.category);
    const tdUnit = td(it.unit);
    const tdPrice = td(money(it.price));
    const tdQty = td(n(it.qty).toFixed(2));
    const tdSold = td(n(it.sold).toFixed(2));
    const tdRemain = td(n(remain).toFixed(2));
    const tdValue = td(money(value));
    const tdMin = td(n(it.min || 0).toFixed(2));

    // –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –ø–æ–¥ –ø—Ä–∞–≥–∞
    if (remain < n(it.min || 0)) {
      tdRemain.innerHTML = `<span class="badge-low">${tdRemain.textContent}</span>`;
    }

    // –¥–µ–π—Å—Ç–≤–∏—è
    const tdActions = document.createElement("td");
    tdActions.append(
      btn("+", "action-btn action-plus", () => adjustSold(it, -1)), // -1 sold = –¥–æ–±–∞–≤—è–º–µ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç —á—Ä–µ–∑ –∫–æ—Ä–µ–∫—Ü–∏—è
      space(),
      btn("‚àí", "action-btn action-minus", () => adjustSold(it, +1)), // +1 sold = –∏–∑—Ö–æ–¥
      space(),
      btn("‚úé", "action-btn action-edit", () => editItem(it)),
      space(),
      btn("üóë", "action-btn action-del", () => delItem(it))
    );

    tr.append(tdIdx, tdName, tdCat, tdUnit, tdPrice, tdQty, tdSold, tdRemain, tdValue, tdMin, tdActions);
    tbody.appendChild(tr);
  });

  totalsEl.textContent = `–û–±—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: ${money(totalValue)}`;
}

function td(text){ const d=document.createElement("td"); d.textContent=String(text); return d; }
function btn(text, cls, onClick){ const b=document.createElement("button"); b.textContent=text; b.className=cls; b.onclick=onClick; return b; }
function space(){ return document.createTextNode(" "); }

// –î–æ–±–∞–≤—è–Ω–µ
addBtn.addEventListener("click", () => {
  const name = (nameEl.value || "").trim();
  const category = categoryEl.value;
  const unit = unitEl.value;
  const price = parseFloat(priceEl.value);
  const qty = parseFloat(qtyEl.value);
  const min = parseFloat(minEl.value);

  if (!name || isNaN(price) || isNaN(qty)) {
    alert("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∏ '–ü—Ä–æ–¥—É–∫—Ç', '–¶–µ–Ω–∞' –∏ '–ù–∞–ª–∏—á–Ω–∏'.");
    return;
  }
  const item = {
    id: crypto.randomUUID ? crypto.randomUUID() : String(Date.now()+Math.random()),
    name, category, unit,
    price: n(price), qty: n(qty),
    sold: 0,
    min: isNaN(min) ? 0 : n(min)
  };
  items.push(item);
  save();
  clearForm();
  render();
});
function clearForm(){
  nameEl.value = "";
  priceEl.value = "";
  qtyEl.value = "";
  minEl.value = "";
  nameEl.focus();
}

// –†–µ–¥–∞–∫—Ü–∏—è
function editItem(it){
  const name = prompt("–ü—Ä–æ–¥—É–∫—Ç:", it.name);
  if (name===null) return;
  const category = prompt("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (—Ç–æ—á–Ω–æ):", it.category);
  if (category===null) return;
  const unit = prompt("–ï–¥–∏–Ω–∏—Ü–∞ (–±—Ä/–∫–≥/–ª):", it.unit);
  if (unit===null) return;
  const price = parseFloat(prompt("–¶–µ–Ω–∞ (–ª–≤/–µ–¥.):", it.price));
  if (isNaN(price)) return alert("–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Ü–µ–Ω–∞.");
  const qty = parseFloat(prompt("–ù–∞–ª–∏—á–Ω–∏ (–≤—Ö–æ–¥):", it.qty));
  if (isNaN(qty)) return alert("–ù–µ–≤–∞–ª–∏–¥–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
  const min = parseFloat(prompt("–ú–∏–Ω. –ø—Ä–∞–≥:", it.min || 0)); // –º–æ–∂–µ –¥–∞ –µ –ø—Ä–∞–∑–Ω–æ

  it.name = name.trim();
  it.category = category.trim();
  it.unit = unit.trim();
  it.price = n(price);
  it.qty = n(qty);
  it.min = isNaN(min) ? 0 : n(min);
  save(); render();
}

// –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ
function delItem(it){
  if (!confirm(`–î–∞ –∏–∑—Ç—Ä–∏—è ‚Äû${it.name}‚Äú?`)) return;
  items = items.filter(x => x.id !== it.id);
  save(); render();
}

// –ö–æ—Ä–µ–∫—Ü–∏—è –ø—Ä–æ–¥–∞–¥–µ–Ω–∏/–∏–∑–ø–æ–ª–∑–≤–∞–Ω–∏
function adjustSold(it, delta){
  const newSold = n(it.sold) + delta;
  if (newSold < 0) return; // –Ω–µ –¥–æ–ø—É—Å–∫–∞–º–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∏
  if (newSold > n(it.qty)) {
    if (!confirm("–ü—Ä–æ–¥–∞–¥–µ–Ω–æ—Ç–æ –Ω–∞–¥—Ö–≤—ä—Ä–ª—è –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –Ω–∞–ª–∏—á–Ω–æ—Ç–æ. –í—Å–µ –ø–∞–∫ –ª–∏?")) return;
  }
  it.sold = newSold;
  save(); render();
}

// –§–∏–ª—Ç—Ä–∏
searchEl.addEventListener("input", render);
filterCategoryEl.addEventListener("change", render);

// –ï–∫—Å–ø–æ—Ä—Ç –∫—ä–º Excel (+ CSV fallback)
exportBtn.addEventListener("click", () => {
  try {
    if (typeof XLSX !== "undefined" && XLSX?.utils) {
      const rows = items.map((it, i) => {
        const remain = n(it.qty) - n(it.sold);
        return {
          "#": i+1,
          "–ü—Ä–æ–¥—É–∫—Ç": it.name,
          "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": it.category,
          "–ï–¥.": it.unit,
          "–¶–µ–Ω–∞": n(it.price),
          "–ù–∞–ª–∏—á–Ω–∏": n(it.qty),
          "–ü—Ä–æ–¥–∞–¥–µ–Ω–∏": n(it.sold),
          "–û—Å—Ç–∞–Ω–∞–ª–∏": n(remain),
          "–°—Ç–æ–π–Ω–æ—Å—Ç": n(remain * n(it.price)),
          "–ú–∏–Ω. –ø—Ä–∞–≥": n(it.min || 0)
        };
      });
      const ws = XLSX.utils.json_to_sheet(rows);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, "–ù–∞–ª–∏—á–Ω–æ—Å—Ç–∏");
      XLSX.writeFile(wb, "inventory.xlsx");
    } else {
      exportCSV();
    }
  } catch(e){
    console.error(e);
    exportCSV();
  }
});
function exportCSV(filename="inventory.csv"){
  const headers = ["#","–ü—Ä–æ–¥—É–∫—Ç","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ï–¥.","–¶–µ–Ω–∞","–ù–∞–ª–∏—á–Ω–∏","–ü—Ä–æ–¥–∞–¥–µ–Ω–∏","–û—Å—Ç–∞–Ω–∞–ª–∏","–°—Ç–æ–π–Ω–æ—Å—Ç","–ú–∏–Ω. –ø—Ä–∞–≥"];
  const lines = [headers.join(",")];
  items.forEach((it, i) => {
    const remain = n(it.qty) - n(it.sold);
    const row = [
      i+1, it.name, it.category, it.unit,
      n(it.price).toFixed(2),
      n(it.qty).toFixed(2),
      n(it.sold).toFixed(2),
      n(remain).toFixed(2),
      (remain * n(it.price)).toFixed(2),
      n(it.min || 0).toFixed(2)
    ];
    lines.push(row.map(csvEscape).join(","));
  });
  const blob = new Blob([lines.join("\n")], { type:"text/csv;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a"); a.href=url; a.download=filename;
  document.body.appendChild(a); a.click(); document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
function csvEscape(v){
  const s = String(v ?? "");
  return /[",\n]/.test(s) ? `"${s.replace(/"/g,'""')}"` : s;
}

// –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–æ
clearAllBtn.addEventListener("click", () => {
  if (!confirm("–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ –≤—Å–∏—á–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–∏?")) return;
  items = []; save(); render();
});

// –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ
render();
